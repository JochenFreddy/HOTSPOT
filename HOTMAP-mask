# script to select, display and export SENTINEL-2 SWIR DATA

# (c) B. Smets, Royal Museum for Central Africa, Belgium

import ee
import geemap
ee.Initialize()
start = ee.Date("2016-01-01")
finish = ee.Date("2022-01-01")

image_select_last = "auto"
image_number = 0

roi_export = "yes"

roi = ee.Geometry.Rectangle([40.6586, 13.6019, 40.6651, 13.6082])

locx= 40.6618
locy= 13.6050
zoom = 14

collection = "COPERNICUS/S2"
s2_coll = (ee.ImageCollection(collection)
.filterDate(start, finish)
.filterBounds(roi))

imagelist= s2_coll.toList(s2_coll.size())

list_length_raw = ee.String(imagelist.length())
list_length_str = list_length_raw.getInfo()
image_number_auto = list_length_str-1

def addlist(list):
  return ee.Image(list).id()
idlist = imagelist.map(addlist)

def HOTMAP(image):
  alpha1 = image.expression('B12/B11', {'B12': image.select('B12'), 'B11' : image.select('B11')})
  alpha2 = image.expression('B12/B8A', {'B12': image.select('B12'), 'B8A' : image.select('B8A')})

  beta1 = image.expression('B11/B8A', {'B11': image.select('B11'), 'B8A' : image.select('B8A')})

  B12 = image.select('B12').divide(10000)
  B11 = image.select('B11').divide(10000)

  alpha_A_raw = image.where(alpha1.gte(1.4),1)
  alpha_A = alpha_A_raw.where(alpha_A_raw.neq(1), 0)

  alpha_B_raw = image.where(alpha2.gte(1.4),1)
  alpha_B = alpha_B_raw.where(alpha_B_raw.neq(1),0)

  alpha_C_raw = image.where(B12.gte(0.15),1)
  alpha_C = alpha_C_raw.where(alpha_C_raw.neq(1),0)

  Alpha_total = image.expression('alpha + alphaa + alphaaa', { 'alpha' : alpha_A, 'alphaa': alpha_B, 'alphaaa': alpha_C})

  Alpha_raw = Alpha_total.where(Alpha_total.eq(3),1)
  Alpha = Alpha_raw.where(Alpha_total.neq(3),0)
  s = image.where(B11.gt(1),1)
  ss= s.where(B12.gt(1),1)
  S= ss.where(ss.neq(1),0)

  beta_A_raw = image.where(beta1.gte(2),1)
  beta_A = beta_A_raw.where(beta_A_raw.neq(1),0)

  beta_B_raw = image.where(B11.gte(0.5),1)
  beta_B = beta_B_raw.where(beta_B_raw.neq(1),0)

  beta_AB = image.expression('beta+betaa', { 'beta': beta_A, 'betaa': beta_B,})

  beta_C_raw = beta_AB.where(beta_AB.eq(2),1)
  beta_C = beta_C_raw.where(beta_C_raw.neq(1),0)

  beta_D_raw = beta_C.where(beta_C.eq(1),1)
  beta_D = beta_D_raw.where(S.eq(1),1)

  Beta = beta_D.where(beta_D.neq(1),0)

  Hot_pixels_raw = image.where(Beta.eq(0),0)
  Hot_pixels_raw2 = Hot_pixels_raw.where(Alpha.eq(0),0)
  Hot_pixels_raw3 = Hot_pixels_raw2.where(Beta.eq(1),1)
  Hot_pixels = Hot_pixels_raw3.where(Alpha.eq(1),1)

  hotspot = image.where(Alpha.eq(0),0)
  hotspot1 = hotspot.where(Beta.eq(0),0)
  
  Cluster = Hot_pixels.connectedComponents(connectedness = ee.Kernel.square(1), maxSize = 128)
  Cluster = Cluster.select(['labels'])
  Cluster = Alpha.addBands(Cluster.select('labels'))
  True_clusters = Cluster.reduceConnectedComponents(reducer = ee.Reducer.mean(), labelBand = 'labels')
  Hotspot = hotspot1.where(True_clusters.gt(0),1)
  clipped = Hotspot.clip(roi)
  Mask = clipped.selfMask()

  return ee.Image(Mask) 
List = []
for x in range(0,image_number_auto):
  imageID1 = imagelist.get(x)
  image1 = ee.Image(imageID1)
  image_date2 = ee.Date(image1.get('system:time_start')).format('YYYY-MM-dd')
  image1 = HOTMAP(image1)
  if image_date2.getInfo() in List:
    continue
  List.append(image_date2.getInfo())
  visParams = {
    'bands': ['B1'],
    min: -100,
    max: 12000
  }
  Map = geemap.Map(center=[locx,locy], zoom= zoom)
  Map.addLayer(image1.clip(roi), visParams)

  description = 'Export_S2_HOTMAP_Mask_image_' + image_date2.getInfo()
  export_name = 'S2_Erta_Ale_HOTMAP_' + image_date2.getInfo()
  image_to_export = image1.select(['B1'])
  task = ee.batch.Export.image.toDrive(**{
      'image': image_to_export.toInt(),
      'description': description,
      'folder': 'Hotspot_masks/HOTMAP/S2/Erta_Ale',
      'fileNamePrefix': export_name,
      'scale': 20,
      'region': roi,
      'fileFormat': 'GeoTIFF'
  })
  task.start()


